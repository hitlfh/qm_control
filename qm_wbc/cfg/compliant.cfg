#!/usr/bin/env python
PACKAGE = "qm_wbc"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# controller model
gen.add("admittance_controller_model",int_t,0,"the mode of admittance control", 2, 1, 3)
# torque max
gen.add("joint1_tau_max", double_t, 0, "max torque of joint1", 40, 0.0, 100)
gen.add("joint2_tau_max", double_t, 0, "max torque of joint2", 200, 0.0, 200)
gen.add("joint3_tau_max", double_t, 0, "max torque of joint3", 200, 0.0, 200)
gen.add("joint4_tau_max", double_t, 0, "max torque of joint4", 20, 0.0, 20)
gen.add("joint5_tau_max", double_t, 0, "max torque of joint5", 20, 0.0, 20)
gen.add("joint6_tau_max", double_t, 0, "max torque of joint6", 20, 0.0, 20)
gen.add("mu", double_t, 0, "friction coefficient", 0.3, 0.0, 1)

# bounded admittance
# gen.add("Mbx", double_t, 0, "arm's joint proxy Mx", 10, 0.0, 100)
# gen.add("Bbx", double_t, 0, "arm's joint proxy Bx", 20, 0.0, 100)

# gen.add("Mb2", double_t, 0, "arm's joint2 controller M", 7, 0.0, 20)
# gen.add("Kb2", double_t, 0, "arm's joint2 controller K", 2000, 0.0, 10000)
# gen.add("Bb2", double_t, 0, "arm's joint2 controller B", 10, 0.0, 100)
# gen.add("Lb2", double_t, 0, "arm's joint2 controller L", 15, 0.0, 100)

# gen.add("Mb1", double_t, 0, "arm's joint1 controller M", 5, 0.0, 100)
# gen.add("Kb1", double_t, 0, "arm's joint1 controller K", 3000, 0.0, 10000)
# gen.add("Bb1", double_t, 0, "arm's joint1 controller B", 20, 0.0, 100)
# gen.add("Lb1", double_t, 0, "arm's joint1 controller L", 5, 0.0, 100)

# 多维参数

#力控
# # proxy
# gen.add("Multi_M1x", double_t, 0, "multi_dimensional joint1 proxy Mx", 10, 0.0, 1000)
# gen.add("Multi_D1x", double_t, 0, "multi_dimensional joint1 proxy Dx", 15, 0.0, 500)
# gen.add("Multi_K1x", double_t, 0, "multi_dimensional joint1 proxy Kx", 0, 0.0, 5000)

# gen.add("Multi_M2x", double_t, 0, "multi_dimensional joint2 proxy Mx", 10, 0.0, 1000)
# gen.add("Multi_D2x", double_t, 0, "multi_dimensional joint2 proxy Dx", 15, 0.0, 500)
# gen.add("Multi_K2x", double_t, 0, "multi_dimensional joint2 proxy Kx", 0, 0.0, 5000)

# # 滑模变量
# # M = [1 0 0 1] C = [20 0 0 20]是 lambda = 2   k_1 = 8
# gen.add("SM_lambda", double_t, 0, "sliding mode param lambda", 2, 0.0, 100)
# gen.add("SM_k_1", double_t, 0, "sliding mode param k_1", 8, 0.0, 100)

#柔顺
# proxy
gen.add("Multi_M1x", double_t, 0, "multi_dimensional joint1 proxy Mx", 20, 0.0, 1000)
gen.add("Multi_D1x", double_t, 0, "multi_dimensional joint1 proxy Dx", 40, 0.0, 500)
gen.add("Multi_K1x", double_t, 0, "multi_dimensional joint1 proxy Kx", 20, 0.0, 5000)

gen.add("Multi_M2x", double_t, 0, "multi_dimensional joint2 proxy Mx", 35, 0.0, 1000)
gen.add("Multi_D2x", double_t, 0, "multi_dimensional joint2 proxy Dx", 100, 0.0, 500)
gen.add("Multi_K2x", double_t, 0, "multi_dimensional joint2 proxy Kx", 35, 0.0, 5000)

gen.add("Multi_Kp1", double_t, 0, "Multi BA kp1", 80, 0.0, 2000)
gen.add("Multi_Kp2", double_t, 0, "Multi BA kp2", 400, 0.0, 2000)
gen.add("Multi_Kd1", double_t, 0, "Multi BA kd1", 10, 0.0, 500)
gen.add("Multi_Kd2", double_t, 0, "Multi BA kd2", 15, 0.0, 500)

gen.add("Multi_M1", double_t, 0, "sliding mode param M_1", 0.5, 0.0, 100)
gen.add("Multi_M2", double_t, 0, "sliding mode param M_2", 0.5, 0.0, 100)
gen.add("Multi_C1", double_t, 0, "sliding mode param C_1", 0, 0.0, 100)
gen.add("Multi_C2", double_t, 0, "sliding mode param C_2", 0, 0.0, 100)

# 机械臂滑模变量
# 标量形式滑模变量
gen.add("SM_lambda", double_t, 0, "sliding mode param lambda", 12, 0.0, 100)
gen.add("SM_k_1", double_t, 0, "sliding mode param k_1", 10, 0.0, 100)
# 矩阵形式滑模变量
gen.add("SM_Lambda1", double_t, 0, "sliding mode param Lambda1", 15, 0.0, 100)
gen.add("SM_Lambda2", double_t, 0, "sliding mode param Lambda2", 24, 0.0, 100)
gen.add("SM_K1_1", double_t, 0, "sliding mode param K1_1", 7, 0.0, 100)
gen.add("SM_K1_2", double_t, 0, "sliding mode param K1_2", 9, 0.0, 100)

# base 滑模变量
gen.add("Base_Lambda_x", double_t, 0, "sliding mode param Lambda1", 300, 0.0, 1000)
gen.add("Base_Lambda_y", double_t, 0, "sliding mode param Lambda2", 300, 0.0, 1000)
gen.add("Base_K1_x", double_t, 0, "sliding mode param K1_1", 60, 0.0, 1000)
gen.add("Base_K1_y", double_t, 0, "sliding mode param K1_2", 60, 0.0, 1000)
# 矩阵形式PID参数
gen.add("Multi_M_pid1", double_t, 0, "Multi BA M_pid1", 5, 0.0, 500)
gen.add("Multi_M_pid2", double_t, 0, "Multi BA M_pid2", 5, 0.0, 500)
gen.add("Multi_K_pid1", double_t, 0, "Multi BA K_pid1", 15000, 0.0, 20000)
gen.add("Multi_K_pid2", double_t, 0, "Multi BA K_pid2", 15000, 0.0, 20000)
gen.add("Multi_B_pid1", double_t, 0, "Multi BA B_pid1", 50, 0.0, 500)
gen.add("Multi_B_pid2", double_t, 0, "Multi BA B_pid2", 50, 0.0, 500)
gen.add("Multi_L_pid1", double_t, 0, "Multi BA L_pid1", 0, 0.0, 500)
gen.add("Multi_L_pid2", double_t, 0, "Multi BA L_pid2", 0, 0.0, 500)

#纯导纳关节控制器使能
gen.add("begin", int_t, 0, "begin of our controller", 3, 0, 6)
gen.add("end", int_t, 0, "end of our controller", 3, 0, 6)
# 单维参数
# joint 1 proxy
gen.add("M1x", double_t, 0, "arm's joint1 proxy Mx", 10, 0.0, 100)
gen.add("D1x", double_t, 0, "arm's joint1 proxy Dx", 60, 0.0, 500)
gen.add("K1x", double_t, 0, "arm's joint1 proxy Kx", 50, 0.0, 5000)

# joint 2 proxy
gen.add("M2x", double_t, 0, "arm's joint2 proxy Mx", 10, 0.0, 100)
gen.add("D2x", double_t, 0, "arm's joint2 proxy Dx", 80, 0.0, 500)
gen.add("K2x", double_t, 0, "arm's joint2 proxy Kx", 50, 0.0, 5000)

# # joint 1 controller
# gen.add("M1", double_t, 0, "arm's joint1 controller M", 5, 0.0, 100)
# gen.add("K1", double_t, 0, "arm's joint1 controller K", 3000, 0.0, 10000)
# gen.add("D1", double_t, 0, "arm's joint1 controller B", 20, 0.0, 100)
# gen.add("L1", double_t, 0, "arm's joint1 controller L", 5, 0.0, 100)


# # joint 2 controller
# gen.add("M2", double_t, 0, "arm's joint2 controller M", 7, 0.0, 20)
# gen.add("K2", double_t, 0, "arm's joint2 controller K", 2000, 0.0, 10000)
# gen.add("D2", double_t, 0, "arm's joint2 controller B", 10, 0.0, 100)
# gen.add("L2", double_t, 0, "arm's joint2 controller L", 15, 0.0, 100)


# base x proxy
gen.add("Mbase_px", double_t, 0, "base's x-component proxy Mx", 10, 0.0, 100)
gen.add("Bbase_px", double_t, 0, "base's x-component proxy Bx", 700, 0.0, 1000)
gen.add("Kbase_px", double_t, 0, "base's x-component proxy Kx", 500, 0.0, 1000)

# base y proxy
gen.add("Mbase_py", double_t, 0, "base's y-component proxy Mx", 10, 0.0, 100)
gen.add("Bbase_py", double_t, 0, "base's y-component proxy Bx", 500, 0.0, 5000)
gen.add("Kbase_py", double_t, 0, "base's y-component proxy Kx", 500, 0.0, 5000)

# base x controller
gen.add("Mbasex", double_t, 0, "base's x-component controller M", 5, 0.0, 100)
gen.add("Kbasex", double_t, 0, "base's x-component controller K", 20000.0, 0.0, 50000)
gen.add("Bbasex", double_t, 0, "base's x-component controller B", 400.0, 0.0, 1000)
gen.add("Lbasex", double_t, 0, "base's x-component controller L", 0, 0.0, 100)

# base y controller
gen.add("Mbasey", double_t, 0, "base's y-component controller M", 5, 0.0, 100)
gen.add("Kbasey", double_t, 0, "base's y-component controller K", 1000, 0.0, 10000)
gen.add("Bbasey", double_t, 0, "base's y-component controller B", 1000, 0.0, 1000)
gen.add("Lbasey", double_t, 0, "base's y-component controller L", 10, 0.0, 100)





exit(gen.generate(PACKAGE, "compliant", "Compliant"))